// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: helloworld/v1/user_info.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInfoServiceClient is the client API for UserInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoServiceClient interface {
	Save(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*CommReply, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommReply, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUserInfoReply, error)
}

type userInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoServiceClient(cc grpc.ClientConnInterface) UserInfoServiceClient {
	return &userInfoServiceClient{cc}
}

func (c *userInfoServiceClient) Save(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*CommReply, error) {
	out := new(CommReply)
	err := c.cc.Invoke(ctx, "/demo.v1.UserInfoService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommReply, error) {
	out := new(CommReply)
	err := c.cc.Invoke(ctx, "/demo.v1.UserInfoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, "/demo.v1.UserInfoService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUserInfoReply, error) {
	out := new(ListUserInfoReply)
	err := c.cc.Invoke(ctx, "/demo.v1.UserInfoService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoServiceServer is the server API for UserInfoService service.
// All implementations must embed UnimplementedUserInfoServiceServer
// for forward compatibility
type UserInfoServiceServer interface {
	Save(context.Context, *UserInfo) (*CommReply, error)
	Delete(context.Context, *IdRequest) (*CommReply, error)
	Get(context.Context, *IdRequest) (*UserInfoReply, error)
	List(context.Context, *ListRequest) (*ListUserInfoReply, error)
	mustEmbedUnimplementedUserInfoServiceServer()
}

// UnimplementedUserInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoServiceServer struct {
}

func (UnimplementedUserInfoServiceServer) Save(context.Context, *UserInfo) (*CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedUserInfoServiceServer) Delete(context.Context, *IdRequest) (*CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserInfoServiceServer) Get(context.Context, *IdRequest) (*UserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserInfoServiceServer) List(context.Context, *ListRequest) (*ListUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserInfoServiceServer) mustEmbedUnimplementedUserInfoServiceServer() {}

// UnsafeUserInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoServiceServer will
// result in compilation errors.
type UnsafeUserInfoServiceServer interface {
	mustEmbedUnimplementedUserInfoServiceServer()
}

func RegisterUserInfoServiceServer(s grpc.ServiceRegistrar, srv UserInfoServiceServer) {
	s.RegisterService(&UserInfoService_ServiceDesc, srv)
}

func _UserInfoService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.UserInfoService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).Save(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.UserInfoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.UserInfoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.UserInfoService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfoService_ServiceDesc is the grpc.ServiceDesc for UserInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v1.UserInfoService",
	HandlerType: (*UserInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _UserInfoService_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserInfoService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserInfoService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserInfoService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/user_info.proto",
}
